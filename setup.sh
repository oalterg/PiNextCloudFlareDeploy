#!/bin/bash
# setup.sh â€” Raspberry Pi Nextcloud + Cloudflare Tunnel (no API token required)

set -euo pipefail

REPO_DIR="/opt/raspi-nextcloud-setup"
ENV_FILE="$REPO_DIR/.env"
ENV_TEMPLATE="$REPO_DIR/.env.template"
COMPOSE_FILE="$REPO_DIR/docker-compose.yml"
BACKUP_DIR="/mnt/backup"

echo "=== Raspberry Pi Nextcloud Setup ==="

if [[ $EUID -ne 0 ]]; then
    echo "Please run as root (sudo ./setup.sh)"
    exit 1
fi

# ensure interactive prompts even if script is piped
exec < /dev/tty

cd "$REPO_DIR"

# --- OS preparation ---
echo "[1/9] Updating system..."
apt-get update -y && apt-get upgrade -y

echo "[2/12] Installing dependencies..."
# Docker (official repo + compose plugin)
apt-get install -y ca-certificates curl gnupg lsb-release
mkdir -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] \
  https://download.docker.com/linux/debian $(lsb_release -cs) stable" \
  > /etc/apt/sources.list.d/docker.list

    apt-get update -y
apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin

# Cloudflared
# Add cloudflare gpg key
sudo mkdir -p --mode=0755 /usr/share/keyrings
curl -fsSL https://pkg.cloudflare.com/cloudflare-main.gpg | sudo tee /usr/share/keyrings/cloudflare-main.gpg >/dev/null
# Add this repo to your apt repositories
echo 'deb [signed-by=/usr/share/keyrings/cloudflare-main.gpg] https://pkg.cloudflare.com/cloudflared any main' | sudo tee /etc/apt/sources.list.d/cloudflared.list
# install cloudflared
sudo apt-get update && sudo apt-get install cloudflared

# Other tools
apt-get install -y cron git jq moreutils

systemctl enable docker
systemctl start docker

# --- Gather parameters ---
echo "[3/9] Gathering configuration..."
read -rp "Nextcloud admin username [admin]: " NEXTCLOUD_ADMIN_USER
NEXTCLOUD_ADMIN_USER=${NEXTCLOUD_ADMIN_USER:-admin}
read -rp "Nextcloud admin password: " NEXTCLOUD_ADMIN_PASSWORD

read -rp "Nextcloud domain(s) (space-separated, e.g. pinextcloud.local cloud.example.com): " NEXTCLOUD_TRUSTED_DOMAINS
DOMAIN_ARRAY=($NEXTCLOUD_TRUSTED_DOMAINS)
PRIMARY_DOMAIN="${DOMAIN_ARRAY[0]}"

read -rp "MySQL root password: " MYSQL_ROOT_PASSWORD
read -rp "MySQL user [nextcloud]: " MYSQL_USER
MYSQL_USER=${MYSQL_USER:-nextcloud}
read -rp "MySQL user password: " MYSQL_PASSWORD
MYSQL_DATABASE="nextcloud"

USER_HOME=$(eval echo "~$SUDO_USER")
NEXTCLOUD_DATA_DIR="$USER_HOME/nextcloud"
NEXTCLOUD_PORT="8080"

if [[ ! -d "$NEXTCLOUD_DATA_DIR" ]]; then
    echo "Creating Nextcloud data directory $NEXTCLOUD_DATA_DIR..."
    mkdir -p "$NEXTCLOUD_DATA_DIR"
    chown -R 33:33 "$NEXTCLOUD_DATA_DIR"
fi

mkdir -p "$BACKUP_DIR"

# --- Cloudflare Tunnel setup ---
echo "[4/9] Cloudflare tunnel setup..."
read -rp "Use Cloudflare Tunnel? [y/N]: " USE_CF
USE_CF=${USE_CF:-n}

CF_TUNNEL_ID=""
CF_HOSTNAME=""

if [[ "$USE_CF" =~ ^[Yy]$ ]]; then
    echo "Logging into Cloudflare (a URL will open in your browser)..."
    cloudflared tunnel login

    read -rp "Enter your base domain (already in Cloudflare, e.g. example.com): " BASE_DOMAIN
    read -rp "Enter desired subdomain (e.g. nextcloud): " SUBDOMAIN
    CF_HOSTNAME="$SUBDOMAIN.$BASE_DOMAIN"

    TUNNEL_NAME="nextcloud-tunnel"
    EXISTING_TUNNEL_ID=$(cloudflared tunnel list --output json 2>/dev/null | jq -r ".[] | select(.name==\"$TUNNEL_NAME\") | .id" || true)

    if [[ -n "$EXISTING_TUNNEL_ID" && "$EXISTING_TUNNEL_ID" != "null" ]]; then
        CF_TUNNEL_ID="$EXISTING_TUNNEL_ID"
        echo "Reusing tunnel ID: $CF_TUNNEL_ID"
    else
        #CF_TUNNEL_ID=$(cloudflared tunnel create "$TUNNEL_NAME" | grep -oP "(?<=Created tunnel ).*")
        CF_TUNNEL_ID=$(cloudflared tunnel create "$TUNNEL_NAME" | awk '/Created tunnel/{print $3}')
    fi

    # Path to credentials JSON generated by cloudflared
    CREDENTIALS_FILE="/root/.cloudflared/${CF_TUNNEL_ID}.json"

    echo "Routing DNS for $CF_HOSTNAME..."
    cloudflared tunnel route dns "$TUNNEL_NAME" "$CF_HOSTNAME"

    mkdir -p /etc/cloudflared
    cat > /etc/cloudflared/config.yml <<EOF
tunnel: $CF_TUNNEL_ID
credentials-file: $CREDENTIALS_FILE

ingress:
  - hostname: $CF_HOSTNAME
    service: http://localhost:$NEXTCLOUD_PORT
  - service: http_status:404
EOF


    # Create systemd service for cloudflared
    echo "Creating systemd service for cloudflared..."
    cat >/etc/systemd/system/cloudflared.service <<EOF
[Unit]
Description=Cloudflare Tunnel
After=network-online.target
Wants=network-online.target

[Service]
TimeoutStartSec=0
Type=notify
ExecStart=/usr/bin/cloudflared --config /etc/cloudflared/config.yml tunnel run
Restart=on-failure
RestartSec=5s
User=root

[Install]
WantedBy=multi-user.target
EOF

    systemctl daemon-reload
    systemctl enable cloudflared
    systemctl restart cloudflared


fi

# --- Generate .env ---
echo "[5/9] Writing .env..."
cp "$ENV_TEMPLATE" "$ENV_FILE"
sed -i \
    -e "s|NEXTCLOUD_DATA_DIR=.*|NEXTCLOUD_DATA_DIR=$NEXTCLOUD_DATA_DIR|" \
    -e "s|NEXTCLOUD_ADMIN_USER=.*|NEXTCLOUD_ADMIN_USER=$NEXTCLOUD_ADMIN_USER|" \
    -e "s|NEXTCLOUD_ADMIN_PASSWORD=.*|NEXTCLOUD_ADMIN_PASSWORD=$NEXTCLOUD_ADMIN_PASSWORD|" \
    -e "s|NEXTCLOUD_TRUSTED_DOMAINS=.*|NEXTCLOUD_TRUSTED_DOMAINS=$NEXTCLOUD_TRUSTED_DOMAINS|" \
    -e "s|NEXTCLOUD_PORT=.*|NEXTCLOUD_PORT=$NEXTCLOUD_PORT|" \
    -e "s|MYSQL_ROOT_PASSWORD=.*|MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD|" \
    -e "s|MYSQL_PASSWORD=.*|MYSQL_PASSWORD=$MYSQL_PASSWORD|" \
    -e "s|MYSQL_DATABASE=.*|MYSQL_DATABASE=$MYSQL_DATABASE|" \
    -e "s|MYSQL_USER=.*|MYSQL_USER=$MYSQL_USER|" \
    -e "s|CF_TUNNEL_ID=.*|CF_TUNNEL_ID=$CF_TUNNEL_ID|" \
    "$ENV_FILE"

# --- Deploy ---
echo "[6/9] Deploying Docker stack..."
docker compose --env-file "$ENV_FILE" -f "$COMPOSE_FILE" up -d

# --- Backup setup ---
echo "[7/9] Installing backup script..."
chmod +x "$REPO_DIR/backup.sh"

if mountpoint -q "$BACKUP_DIR"; then
    echo "Enabling cron job..."
    (crontab -l 2>/dev/null | grep -v "$REPO_DIR/backup.sh" ; echo "0 3 * * 0 $REPO_DIR/backup.sh") | crontab -
else
    echo "Warning: Backup directory is not mounted. Skipping cron job."
fi

echo "[8/9] Installation complete."
if [[ "$USE_CF" =~ ^[Yy]$ ]]; then
    echo "[9/9] Access Nextcloud at: https://$CF_HOSTNAME"
else
    echo "[9/9] Access Nextcloud locally at: http://$PRIMARY_DOMAIN:$NEXTCLOUD_PORT"
fi
